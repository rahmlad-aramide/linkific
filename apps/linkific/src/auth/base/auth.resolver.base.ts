/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Auth } from "./Auth";
import { AuthCountArgs } from "./AuthCountArgs";
import { AuthFindManyArgs } from "./AuthFindManyArgs";
import { AuthFindUniqueArgs } from "./AuthFindUniqueArgs";
import { CreateAuthArgs } from "./CreateAuthArgs";
import { UpdateAuthArgs } from "./UpdateAuthArgs";
import { DeleteAuthArgs } from "./DeleteAuthArgs";
import { AuthService } from "../auth.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Auth)
export class AuthResolverBase {
  constructor(
    protected readonly service: AuthService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Auth",
    action: "read",
    possession: "any",
  })
  async _authsMeta(
    @graphql.Args() args: AuthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Auth])
  @nestAccessControl.UseRoles({
    resource: "Auth",
    action: "read",
    possession: "any",
  })
  async auths(@graphql.Args() args: AuthFindManyArgs): Promise<Auth[]> {
    return this.service.auths(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Auth, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Auth",
    action: "read",
    possession: "own",
  })
  async auth(@graphql.Args() args: AuthFindUniqueArgs): Promise<Auth | null> {
    const result = await this.service.auth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Auth)
  @nestAccessControl.UseRoles({
    resource: "Auth",
    action: "create",
    possession: "any",
  })
  async createAuth(@graphql.Args() args: CreateAuthArgs): Promise<Auth> {
    return await this.service.createAuth({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Auth)
  @nestAccessControl.UseRoles({
    resource: "Auth",
    action: "update",
    possession: "any",
  })
  async updateAuth(@graphql.Args() args: UpdateAuthArgs): Promise<Auth | null> {
    try {
      return await this.service.updateAuth({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Auth)
  @nestAccessControl.UseRoles({
    resource: "Auth",
    action: "delete",
    possession: "any",
  })
  async deleteAuth(@graphql.Args() args: DeleteAuthArgs): Promise<Auth | null> {
    try {
      return await this.service.deleteAuth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
