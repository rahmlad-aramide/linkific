/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Auth } from "@prisma/client";

export class AuthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AuthCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthCountArgs>
  ): Promise<number> {
    return this.prisma.auth.count(args);
  }

  async auths<T extends Prisma.AuthFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthFindManyArgs>
  ): Promise<Auth[]> {
    return this.prisma.auth.findMany(args);
  }
  async auth<T extends Prisma.AuthFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthFindUniqueArgs>
  ): Promise<Auth | null> {
    return this.prisma.auth.findUnique(args);
  }
  async createAuth<T extends Prisma.AuthCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthCreateArgs>
  ): Promise<Auth> {
    return this.prisma.auth.create<T>(args);
  }
  async updateAuth<T extends Prisma.AuthUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthUpdateArgs>
  ): Promise<Auth> {
    return this.prisma.auth.update<T>(args);
  }
  async deleteAuth<T extends Prisma.AuthDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuthDeleteArgs>
  ): Promise<Auth> {
    return this.prisma.auth.delete(args);
  }
}
